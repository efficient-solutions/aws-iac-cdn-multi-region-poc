# IaC CDN Multi-Region PoC for AWS
#
# Filename: template.yml
# Copyright (c) 2024 Efficient Solutions LLC
#
# This software is licensed under the MIT License.

AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - 'AWS::LanguageExtensions'
Description: >
  A CloudFormation template to deploy a multi-region Content Delivery Network (CDN) architecture 
  with S3 buckets as origins across multiple regions and a CloudFront Function for dynamic routing
  based on the user's geographic location.

Parameters:
  ProjectId:
    Description: ID of the project used for resource identification and tagging
    Type: String
    Default: aws-iac-cdn-multi-region-poc
    AllowedPattern: ^[a-z0-9-]+$
    ConstraintDescription: Project name must contain only lowercase letters, numbers, and hyphens

  Regions:
    Description: List of AWS regions with S3 buckets
    Type: String

Conditions:
  IsPrimaryRegion:
    # Evaluates to true if the current region is us-east-1
    !Equals [!Ref 'AWS::Region', us-east-1]

Resources:
  StaticContentBucket:
    # S3 bucket for storing static and media assets
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectId}-${AWS::Region}"
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectId
        - Key: ResourceGroup
          Value: Storage
        - Key: ResourceType
          Value: Bucket

  StaticContentBucketPolicy:
    # Policy to restrict access to static content bucket to CloudFront
    #
    # This policy restricts access to the S3 bucket for CloudFront as the origin source.
    # Documentation: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticContentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::${StaticContentBucket}/*"
            Condition:
              StringLike:
                'AWS:SourceArn': !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/*"

  CloudFrontOriginRequestFunction:
    Type: AWS::CloudFront::Function
    Condition: IsPrimaryRegion
    Properties:
      Name: !Sub "${ProjectId}-Origin-Request"
      AutoPublish: true
      FunctionConfig:
        Comment: Function to choose S3 origin bucket based on viewer's location
        Runtime: cloudfront-js-2.0
      FunctionCode: !Sub |
        import cf from 'cloudfront';

        // Define latitude and longitude for country codes (centroids).
        const awsRegionCoordinates = {'us-east-1':{lat:37.7749,lon:-77.0369},'us-east-2':{lat:40.4173,lon:-82.9071},'us-west-1':{lat:37.3382,lon:-121.8863},'us-west-2':{lat:45.5051,lon:-122.6750},'af-south-1':{lat:-33.9249,lon:18.4241},'ap-east-1':{lat:22.3193,lon:114.1694},'ap-south-1':{lat:19.0760,lon:72.8777},'ap-south-2':{lat:12.9716,lon:77.5946},'ap-southeast-1':{lat:1.3521,lon:103.8198},'ap-southeast-2':{lat:-33.8688,lon:151.2093},'ap-southeast-3':{lat:-6.2088,lon:106.8456},'ap-southeast-4':{lat:-41.2865,lon:174.7762},'ap-northeast-1':{lat:35.6895,lon:139.6917},'ap-northeast-2':{lat:37.5665,lon:126.9780},'ap-northeast-3':{lat:34.6937,lon:135.5023},'ca-central-1':{lat:43.651070,lon:-79.347015},'cn-north-1':{lat:39.9042,lon:116.4074},'cn-northwest-1':{lat:38.3417,lon:106.6177},'eu-central-1':{lat:50.1109,lon:8.6821},'eu-central-2':{lat:46.9481,lon:7.4474},'eu-north-1':{lat:59.3293,lon:18.0686},'eu-south-1':{lat:41.9028,lon:12.4964},'eu-south-2':{lat:38.7169,lon:-9.1399},'eu-west-1':{lat:53.3498,lon:-6.2603},'eu-west-2':{lat:51.5074,lon:-0.1278},'eu-west-3':{lat:48.8566,lon:2.3522},'il-central-1':{lat:31.7683,lon:35.2137},'me-central-1':{lat:25.2048,lon:55.2708},'me-south-1':{lat:26.2332,lon:50.6071},'sa-east-1':{lat:-23.5505,lon:-46.6333}};
        // Define latitude and longitude for AWS regions.
        const countryCoordinates = {AF:{lat:33.9391,lon:67.7100},AL:{lat:41.1533,lon:20.1683},DZ:{lat:28.0339,lon:1.6596},AD:{lat:42.5462,lon:1.6016},AO:{lat:-11.2027,lon:17.8739},AG:{lat:17.0608,lon:-61.7964},AR:{lat:-38.4161,lon:-63.6167},AM:{lat:40.0691,lon:45.0382},AU:{lat:-25.2744,lon:133.7751},AT:{lat:47.5162,lon:14.5501},AZ:{lat:40.1431,lon:47.5769},BS:{lat:25.0343,lon:-77.3963},BH:{lat:26.0667,lon:50.5577},BD:{lat:23.6850,lon:90.3563},BB:{lat:13.1939,lon:-59.5432},BY:{lat:53.7098,lon:27.9534},BE:{lat:50.8503,lon:4.3517},BZ:{lat:17.1899,lon:-88.4976},BJ:{lat:9.3077,lon:2.3158},BT:{lat:27.5142,lon:90.4336},BO:{lat:-16.2902,lon:-63.5887},BA:{lat:43.9159,lon:17.6791},BW:{lat:-22.3285,lon:24.6849},BR:{lat:-14.2350,lon:-51.9253},BN:{lat:4.5353,lon:114.7277},BG:{lat:42.7339,lon:25.4858},BF:{lat:12.2383,lon:-1.5616},BI:{lat:-3.3731,lon:29.9189},KH:{lat:12.5657,lon:104.9910},CM:{lat:3.8480,lon:11.5021},CA:{lat:56.1304,lon:-106.3468},CV:{lat:16.5388,lon:-23.0418},CF:{lat:6.6111,lon:20.9394},TD:{lat:15.4542,lon:18.7322},CL:{lat:-35.6751,lon:-71.5430},CN:{lat:35.8617,lon:104.1954},CO:{lat:4.5709,lon:-74.2973},KM:{lat:-11.8750,lon:43.8722},CG:{lat:-0.2280,lon:15.8277},CD:{lat:-4.0383,lon:21.7587},CR:{lat:9.7489,lon:-83.7534},HR:{lat:45.1000,lon:15.2000},CU:{lat:21.5218,lon:-77.7812},CY:{lat:35.1264,lon:33.4299},CZ:{lat:49.8175,lon:15.4730},DK:{lat:56.2639,lon:9.5018},DJ:{lat:11.8251,lon:42.5903},DM:{lat:15.4150,lon:-61.3710},DO:{lat:18.7357,lon:-70.1627},EC:{lat:-1.8312,lon:-78.1834},EG:{lat:26.8206,lon:30.8025},SV:{lat:13.7942,lon:-88.8965},GQ:{lat:1.6508,lon:10.2679},ER:{lat:15.1794,lon:39.7823},EE:{lat:58.5953,lon:25.0136},SZ:{lat:-26.5225,lon:31.4659},ET:{lat:9.1450,lon:40.4897},FJ:{lat:-17.7134,lon:178.0650},FI:{lat:61.9241,lon:25.7482},FR:{lat:46.6034,lon:1.8883},GA:{lat:-0.8037,lon:11.6094},GM:{lat:13.4432,lon:-15.3101},GE:{lat:42.3154,lon:43.3569},DE:{lat:51.1657,lon:10.4515},GH:{lat:7.9465,lon:-1.0232},GR:{lat:39.0742,lon:21.8243},GD:{lat:12.1165,lon:-61.6790},GT:{lat:15.7835,lon:-90.2308},GN:{lat:9.9456,lon:-9.6966},GW:{lat:11.8037,lon:-15.1804},GY:{lat:4.8604,lon:-58.9302},HT:{lat:18.9712,lon:-72.2852},HN:{lat:15.1999,lon:-86.2419},HU:{lat:47.1625,lon:19.5033},IS:{lat:64.9631,lon:-19.0208},IN:{lat:20.5937,lon:78.9629},ID:{lat:-0.7893,lon:113.9213},IR:{lat:32.4279,lon:53.6880},IQ:{lat:33.2232,lon:43.6793},IE:{lat:53.1424,lon:-7.6921},IL:{lat:31.0461,lon:34.8516},IT:{lat:41.8719,lon:12.5674},JM:{lat:18.1096,lon:-77.2975},JP:{lat:36.2048,lon:138.2529},JO:{lat:30.5852,lon:36.2384},KZ:{lat:48.0196,lon:66.9237},KE:{lat:-1.2864,lon:36.8172},KI:{lat:-3.3704,lon:-168.7340},KP:{lat:40.3399,lon:127.5101},KR:{lat:35.9078,lon:127.7669},KW:{lat:29.3117,lon:47.4818},KG:{lat:41.2044,lon:74.7661},LA:{lat:19.8563,lon:102.4955},LV:{lat:56.8796,lon:24.6032},LB:{lat:33.8547,lon:35.8623},LS:{lat:-29.6099,lon:28.2336},LR:{lat:6.4281,lon:-9.4295},LY:{lat:26.3351,lon:17.2283},LI:{lat:47.1660,lon:9.5554},LT:{lat:55.1694,lon:23.8813},LU:{lat:49.8153,lon:6.1296},MG:{lat:-18.7669,lon:46.8691},MW:{lat:-13.2543,lon:34.3015},MY:{lat:4.2105,lon:101.9758},MV:{lat:3.2028,lon:73.2207},ML:{lat:17.5707,lon:-3.9962},MT:{lat:35.8999,lon:14.5146},MH:{lat:7.1315,lon:171.1845},MR:{lat:21.0079,lon:-10.9408},MU:{lat:-20.3484,lon:57.5522},MX:{lat:23.6345,lon:-102.5528},FM:{lat:7.4256,lon:150.5508},MD:{lat:47.4116,lon:28.3699},MC:{lat:43.7333,lon:7.4167},MN:{lat:46.8625,lon:103.8467},ME:{lat:42.7087,lon:19.3744},MA:{lat:31.7917,lon:-7.0926},MZ:{lat:-18.6657,lon:35.5296},MM:{lat:21.9162,lon:95.9560},NA:{lat:-22.9576,lon:18.4904},NR:{lat:-0.5228,lon:166.9315},NP:{lat:28.3949,lon:84.1240},NL:{lat:52.1326,lon:5.2913},NZ:{lat:-40.9006,lon:174.8860},NI:{lat:12.8654,lon:-85.2072},NE:{lat:17.6078,lon:8.0817},NG:{lat:9.0817,lon:8.6753},MK:{lat:41.6086,lon:21.7453},NO:{lat:60.4720,lon:8.4689},OM:{lat:21.4735,lon:55.9754},PK:{lat:30.3753,lon:69.3451},PW:{lat:7.5150,lon:134.5825},PA:{lat:8.5379,lon:-80.7821},PG:{lat:-6.3149,lon:143.9555},PY:{lat:-23.4425,lon:-58.4438},PE:{lat:-9.1900,lon:-75.0152},PH:{lat:12.8797,lon:121.7740},PL:{lat:51.9194,lon:19.1451},PT:{lat:39.3999,lon:-8.2245},QA:{lat:25.3548,lon:51.1839},RO:{lat:45.9432,lon:24.9668},RU:{lat:61.5240,lon:105.3188},RW:{lat:-1.9403,lon:29.8739},KN:{lat:17.3578,lon:-62.7830},LC:{lat:13.9094,lon:-60.9789},VC:{lat:13.2528,lon:-61.1971},WS:{lat:-13.7590,lon:-172.1046},SM:{lat:43.9336,lon:12.4509},ST:{lat:0.1864,lon:6.6131},SA:{lat:23.8859,lon:45.0792},SN:{lat:14.4974,lon:-14.4524},RS:{lat:44.0165,lon:21.0059},SC:{lat:-4.6796,lon:55.4920},SL:{lat:8.4606,lon:-11.7799},SG:{lat:1.3521,lon:103.8198},SK:{lat:48.6690,lon:19.6990},SI:{lat:46.1512,lon:14.9955},SB:{lat:-9.6457,lon:160.1562},SO:{lat:5.1521,lon:46.1996},ZA:{lat:-30.5595,lon:22.9375},SS:{lat:7.8627,lon:29.6949},ES:{lat:40.4637,lon:-3.7492},LK:{lat:7.8731,lon:80.7718},SD:{lat:12.8628,lon:30.2176},SR:{lat:3.9193,lon:-56.0278},SE:{lat:60.1282,lon:18.6435},CH:{lat:46.8182,lon:8.2275},SY:{lat:34.8021,lon:38.9968},TW:{lat:23.6978,lon:120.9605},TJ:{lat:38.8610,lon:71.2761},TZ:{lat:-6.3690,lon:34.8888},TH:{lat:15.8700,lon:100.9925},TL:{lat:-8.8742,lon:125.7275},TG:{lat:8.6195,lon:0.8248},TO:{lat:-21.1789,lon:-175.1982},TT:{lat:10.6918,lon:-61.2225},TN:{lat:33.8869,lon:9.5375},TR:{lat:38.9637,lon:35.2433},TM:{lat:38.9697,lon:59.5563},TV:{lat:-7.1095,lon:177.6493},UG:{lat:1.3733,lon:32.2903},UA:{lat:48.3794,lon:31.1656},AE:{lat:23.4241,lon:53.8478},GB:{lat:55.3781,lon:-3.4360},US:{lat:37.0902,lon:-95.7129},UY:{lat:-32.5228,lon:-55.7658},UZ:{lat:41.3775,lon:64.5853},VU:{lat:-15.3767,lon:166.9592},VE:{lat:6.4238,lon:-66.5897},VN:{lat:14.0583,lon:108.2772},YE:{lat:15.5527,lon:48.5164},ZM:{lat:-13.1339,lon:27.8493},ZW:{lat:-19.0154,lon:29.1549}};
        // List of available regions
        const availableAwsRegions = '${Regions}'.split(' ')
        // Default region
        const defaultRegion = '${AWS::Region}';

        // Function to calculate the distance between two lat/lon points using the Haversine formula.
        function haversineDistance(lat1, lon1, lat2, lon2) {
            const toRad = (angle) => (Math.PI / 180) * angle;
            const R = 6371; // Radius of Earth in kilometers

            const dLat = toRad(lat2 - lat1);
            const dLon = toRad(lon2 - lon1);

            const a =
                Math.sin(dLat / 2) ** 2 +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;

            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Distance in kilometers
        }

        // Main function
        function closestAwsRegion(awsRegions, countryCode) {
            if (!countryCoordinates[countryCode]) {
                console.log('Unknown country code ' + countryCode);
                return defaultRegion;
            }

            const countryCoord = countryCoordinates[countryCode];
            let closestRegion = defaultRegion;
            let shortestDistance = Infinity;

            for (let i = 0; i < awsRegions.length; i++) {
                const region = awsRegions[i];
                const regionCoord = awsRegionCoordinates[region];
                if (!regionCoord) {
                    console.log('Unknown AWS region: ' + region);
                    return defaultRegion;
                }

                const distance = haversineDistance(
                    countryCoord.lat,
                    countryCoord.lon,
                    regionCoord.lat,
                    regionCoord.lon
                );

                if (distance < shortestDistance) {
                    shortestDistance = distance;
                    closestRegion = region;
                }
            }

            return closestRegion;
        }

        function handler(event) {
            const request = event.request;
            const headers = request.headers;
            const country = headers['cloudfront-viewer-country'] &&
                headers['cloudfront-viewer-country'].value;

            // Find the closest region
            const region = closestAwsRegion(availableAwsRegions, country);
            // Update the region in the bucket's domain
            const domainName = '${StaticContentBucket.RegionalDomainName}'.replaceAll('${AWS::Region}', region);
            // Optional: log the outcome
            console.log('Country: ' + country + ', Region: ' + region + ', Origin: ' + domainName);

            cf.updateRequestOrigin({
                domainName: domainName,
                originAccessControlConfig: {
                    enabled: true,
                    region: region,
                    signingBehavior: 'always',
                    signingProtocol: 'sigv4',
                    originType: 's3'
                },
            });

            return request;
        }

  CloudFrontMultiRegionOriginRequestPolicy:
    # Request policy for passing the Authorization header to the origin
    #
    # Docs:
    # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/helper-functions-origin-modification.html
    Type: AWS::CloudFront::OriginRequestPolicy
    Condition: IsPrimaryRegion
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub "${ProjectId}-MultiRegionOriginRequestPolicy"
        HeadersConfig:
          # We need to pass the `Authorization` header to the origin (S3), however using
          # the `whitelist` behaviour with the `Authorization` header leads to an exception
          # during the deployment. As a workaround, use the `allExcept` behaviour excluding
          # the `Host` header.
          HeaderBehavior: allExcept
          Headers:
            - Host
        CookiesConfig:
          CookieBehavior: none
        QueryStringsConfig:
          QueryStringBehavior: none

  CloudFrontDistribution:
    # CloudFront distribution for serving HTTP API and S3 content
    Type: AWS::CloudFront::Distribution
    Condition: IsPrimaryRegion
    Properties:
      DistributionConfig: 
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2and3
        PriceClass: PriceClass_All
        Origins:
          - Id: StaticContentBucket  # S3 bucket origin with static and media files
            # Use the regional S3 endpoint (`RegionalDomainName`) for `DomainName`
            DomainName: !GetAtt StaticContentBucket.RegionalDomainName
            S3OriginConfig:
              # When using origin access control (OAC) instead of origin access identity,
              # OriginAccessIdentity must be empty
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-s3originconfig.html#aws-properties-cloudfront-distribution-s3originconfig-properties
              OriginAccessIdentity: ''
        DefaultCacheBehavior:
          TargetOriginId: StaticContentBucket
          AllowedMethods: !Split [',', 'GET,HEAD,OPTIONS']
          CachedMethods: !Split [',', 'GET,HEAD,OPTIONS']
          # `CachingOptimized` cache policy:
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          # Custom origin request policy for forwarding the Authorization header from the function to the origin
          OriginRequestPolicyId: !Ref CloudFrontMultiRegionOriginRequestPolicy
          Compress: true
          ViewerProtocolPolicy: https-only
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontOriginRequestFunction.FunctionMetadata.FunctionARN
      Tags:
        - Key: ProjectId
          Value: !Ref ProjectId
        - Key: ResourceGroup
          Value: Distribution
        - Key: ResourceType
          Value: Distribution

Outputs:
  StaticContentBucketId:
    Description: ID of the S3 bucket for static and media files
    Value: !Ref StaticContentBucket

  CloudFrontDistributionId:
    Condition: IsPrimaryRegion
    Description: ID of the CloudFront distribution
    Value: !Ref CloudFrontDistribution

  CloudFrontDefaultDomainUrl:
    Condition: IsPrimaryRegion
    Description: Default domain name URL of the CloudFront distribution
    Value: !Sub "https://${CloudFrontDistribution.DomainName}/"